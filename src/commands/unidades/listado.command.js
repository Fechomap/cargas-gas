// src/commands/unidades/listado.command.js
import { Markup } from 'telegraf';
import { logger } from '../../utils/logger.js';
import { unitController } from '../../controllers/unit/index.js';

/**
 * Configura los comandos para listar y gestionar unidades existentes
 * @param {Telegraf} bot - Instancia del bot de Telegram
 */
export function configurarComandosListado(bot) {
  // Manejar bot√≥n de ver unidades
  bot.action('show_units', async (ctx) => {
    try {
      await ctx.answerCbQuery('Cargando unidades');
      logger.info(`Usuario ${ctx.from.id} solicit√≥ ver unidades`);

      // Llamar al controlador para mostrar unidades
      await unitController.showRegisteredUnits(ctx);
    } catch (error) {
      logger.error(`Error al mostrar unidades: ${error.message}`);
      await ctx.reply('Ocurri√≥ un error al cargar las unidades.');

      // Mostrar men√∫ principal como fallback
      await ctx.reply('¬øQu√© deseas hacer ahora?', {
        reply_markup: Markup.inlineKeyboard([
          [Markup.button.callback('üè† Volver al men√∫ principal', 'main_menu')]
        ])
      });
    }
  });

  // Manejar selecci√≥n de una unidad espec√≠fica
  bot.action(/^view_unit_(.+)$/, async (ctx) => {
    try {
      const unitId = ctx.match[1];
      logger.info(`Usuario ${ctx.from.id} seleccion√≥ unidad ${unitId}`);

      await ctx.answerCbQuery('Cargando informaci√≥n de unidad');
      await unitController.showUnitDetails(ctx, unitId);
    } catch (error) {
      logger.error(`Error al mostrar detalles de unidad: ${error.message}`);
      await ctx.answerCbQuery('Error al cargar detalles');
      await ctx.reply('Ocurri√≥ un error al mostrar los detalles de la unidad.');

      // Volver a la lista de unidades como fallback
      await unitController.showRegisteredUnits(ctx);
    }
  });

  // Manejar acci√≥n de editar unidad
  bot.action(/^edit_unit_(.+)$/, async (ctx) => {
    try {
      const unitId = ctx.match[1];
      logger.info(`Usuario ${ctx.from.id} solicit√≥ editar unidad ${unitId}`);

      await ctx.answerCbQuery('Iniciando edici√≥n de unidad');
      await unitController.startUnitEdit(ctx, unitId);
    } catch (error) {
      logger.error(`Error al iniciar edici√≥n de unidad: ${error.message}`);
      await ctx.answerCbQuery('Error al iniciar edici√≥n');
      await ctx.reply('Ocurri√≥ un error al iniciar la edici√≥n de la unidad.');
    }
  });

  // Manejar acci√≥n de eliminar unidad
  bot.action(/^delete_unit_(.+)$/, async (ctx) => {
    try {
      const unitId = ctx.match[1];
      logger.info(`Usuario ${ctx.from.id} solicit√≥ eliminar unidad ${unitId}`);

      await ctx.answerCbQuery('Solicitando confirmaci√≥n de eliminaci√≥n');

      // Solicitar confirmaci√≥n para eliminar
      await ctx.reply(
        '‚ö†Ô∏è *¬øEst√°s seguro de eliminar esta unidad?*\n\n' +
        'Esta acci√≥n no se puede deshacer y eliminar√° todo el historial de cargas asociado.',
        {
          parse_mode: 'Markdown',
          reply_markup: Markup.inlineKeyboard([
            [
              Markup.button.callback('‚úÖ S√≠, eliminar', `confirm_delete_unit_${unitId}`),
              Markup.button.callback('‚ùå No, cancelar', 'show_units')
            ]
          ])
        }
      );
    } catch (error) {
      logger.error(`Error al solicitar eliminaci√≥n de unidad: ${error.message}`);
      await ctx.answerCbQuery('Error al procesar solicitud');
      await ctx.reply('Ocurri√≥ un error al procesar la solicitud.');
    }
  });

  // Manejar confirmaci√≥n de eliminaci√≥n de unidad
  bot.action(/^confirm_delete_unit_(.+)$/, async (ctx) => {
    try {
      const unitId = ctx.match[1];
      logger.info(`Usuario ${ctx.from.id} confirm√≥ eliminar unidad ${unitId}`);

      await ctx.answerCbQuery('Procesando eliminaci√≥n');

      // Ejecutar la eliminaci√≥n
      const result = await unitController.deleteUnit(ctx, unitId);

      if (result.success) {
        await ctx.reply('‚úÖ Unidad eliminada correctamente.');
      } else {
        await ctx.reply(`‚ùå No se pudo eliminar la unidad: ${result.error}`);
      }

      // Mostrar unidades actualizadas
      await unitController.showRegisteredUnits(ctx);
    } catch (error) {
      logger.error(`Error al eliminar unidad: ${error.message}`);
      await ctx.answerCbQuery('Error al eliminar');
      await ctx.reply('Ocurri√≥ un error al eliminar la unidad.');
    }
  });

  // Volver a la lista de unidades
  bot.action('back_to_units', async (ctx) => {
    try {
      await ctx.answerCbQuery('Volviendo a la lista de unidades');
      await unitController.showRegisteredUnits(ctx);
    } catch (error) {
      logger.error(`Error al volver a lista de unidades: ${error.message}`);
      await ctx.answerCbQuery('Error al cargar unidades');
      await ctx.reply('Ocurri√≥ un error al cargar las unidades.');
    }
  });
}
