generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Fuel {
  id            String        @id @default(uuid())
  tenantId      String
  unitId        String
  liters        Decimal       @db.Decimal(10, 2)
  amount        Decimal       @db.Decimal(10, 2)
  fuelType      FuelType
  saleNumber    String?
  paymentStatus PaymentStatus @default(NO_PAGADA)
  paymentDate   DateTime?
  ticketPhoto   String?
  recordDate    DateTime      @default(now())
  operatorName  String
  unitNumber    String
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
  kilometers    Decimal?      @db.Decimal(10, 2)
  pricePerLiter Decimal?      @db.Decimal(10, 2)
  isActive      Boolean       @default(true)
  Tenant        Tenant        @relation(fields: [tenantId], references: [id])
  Unit          Unit          @relation(fields: [unitId], references: [id])

  @@index([tenantId, paymentStatus])
  @@index([tenantId, recordDate])
  @@index([tenantId, saleNumber])
}

model RegistrationRequest {
  id                String             @id @default(uuid())
  companyName       String
  contactName       String
  contactPhone      String?
  contactEmail      String?
  requesterId       String
  requesterUsername String?
  status            RegistrationStatus @default(PENDING)
  adminNotes        String?
  processedBy       String?
  processedAt       DateTime?
  createdAt         DateTime           @default(now())
  updatedAt         DateTime           @updatedAt
}

model Tenant {
  id                String          @id @default(uuid())
  chatId            String          @unique
  companyName       String
  isActive          Boolean         @default(true)
  subscriptionEnd   DateTime?
  createdAt         DateTime        @default(now())
  updatedAt         DateTime        @updatedAt
  contactEmail      String?
  contactName       String?
  contactPhone      String?
  isApproved        Boolean         @default(false)
  notes             String?
  registrationToken String?         @unique
  AuditLog          AuditLog[]
  FileStorage       FileStorage[]
  Fuel              Fuel[]
  KilometerLog      KilometerLog[]
  TenantSettings    TenantSettings?
  Unit              Unit[]
}

model TenantSettings {
  id                String   @id @default(uuid())
  tenantId          String   @unique
  currency          String   @default("MXN")
  timezone          String   @default("America/Mexico_City")
  allowPhotoSkip    Boolean  @default(true)
  requireSaleNumber Boolean  @default(true)
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  Tenant            Tenant   @relation(fields: [tenantId], references: [id])
}

model Unit {
  id           String         @id @default(uuid())
  tenantId     String
  operatorName String
  unitNumber   String
  buttonId     String
  isActive     Boolean        @default(true)
  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt
  Fuel         Fuel[]
  KilometerLog KilometerLog[]
  Tenant       Tenant         @relation(fields: [tenantId], references: [id])

  @@unique([tenantId, buttonId])
  @@index([tenantId, operatorName])
}

model KilometerLog {
  id         String           @id @default(uuid())
  tenantId   String
  unitId     String
  kilometers Decimal          @db.Decimal(10, 2)
  logType    KilometerLogType
  logDate    DateTime         @db.Date
  logTime    DateTime         @default(now())
  userId     String
  isOmitted  Boolean          @default(false)
  createdAt  DateTime         @default(now())
  updatedAt  DateTime         @updatedAt
  Tenant     Tenant           @relation(fields: [tenantId], references: [id])
  Unit       Unit             @relation(fields: [unitId], references: [id])

  @@unique([tenantId, unitId, logDate, logType])
  @@index([tenantId, logDate])
  @@index([unitId, logDate])
}

model FileStorage {
  id          String   @id @default(uuid())
  tenantId    String
  relatedId   String?
  relatedType String
  fileName    String
  fileType    String
  fileSize    Int
  storageKey  String   @unique
  uploadedBy  String
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  Tenant      Tenant   @relation(fields: [tenantId], references: [id])

  @@index([tenantId, relatedId])
  @@index([tenantId, relatedType])
  @@index([tenantId, createdAt])
}

model AuditLog {
  id        String   @id @default(dbgenerated("gen_random_uuid()"))
  tenantId  String
  userId    String
  userName  String
  action    String
  entity    String
  entityId  String
  changes   Json?
  metadata  Json?
  createdAt DateTime @default(now())
  Tenant    Tenant   @relation(fields: [tenantId], references: [id])

  @@index([tenantId, createdAt])
  @@index([tenantId, entity, entityId])
  @@index([tenantId, userId])
}

enum FuelType {
  GAS
  GASOLINA
  DIESEL
}

enum PaymentStatus {
  PAGADA
  NO_PAGADA
}

enum RegistrationStatus {
  PENDING
  APPROVED
  REJECTED
}

enum KilometerLogType {
  INICIO_TURNO
  FIN_TURNO
}
